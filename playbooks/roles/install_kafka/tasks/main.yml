---
- name: Perform a set of OpenShift API calls
  block:

    - name: Log in to the OpenShift API
      redhat.openshift.openshift_auth:
        host: "{{ ocp_host }}"
        username: "{{ ocp_username }}"
        password: "{{ ocp_password }}"
        validate_certs: false
        state: present
      register: openshift_auth_results

    # - name: Show me the api key
    #   ansible.builtin.debug:
    #     var: openshift_auth_results

    - name: Create amqstreams namespace in OpenShift
      redhat.openshift.k8s:
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        host: "{{ ocp_host }}"
        validate_certs: false
        name: amqstreams
        api_version: v1
        kind: Namespace
        state: present

    - name: Create operator group for AMQ Streams Operator
      redhat.openshift.k8s:
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        host: "{{ ocp_host }}"
        validate_certs: false
        api_version: operators.coreos.com/v1
        kind: OperatorGroup
        resource_definition:
          metadata:
            name: amqstreams-operator
            namespace: amqstreams
          spec:
            targetNamespaces:
              - amqstreams
        state: present

    - name: Install AMQ Streams Operator
      redhat.openshift.k8s:
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        host: "{{ ocp_host }}"
        validate_certs: false
        api_version: operators.coreos.com/v1alpha1
        kind: Subscription
        resource_definition:
          metadata:
            name: amq-streams
            namespace: openshift-operators
          spec:
            channel: 'stable'
            installPlanApproval: Automatic
            name: amq-streams
            source: redhat-operators
            sourceNamespace: openshift-marketplace
        state: present

    - name: Wait for the operator to be available
      kubernetes.core.k8s_info:
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        host: "{{ ocp_host }}"
        validate_certs: false
        kind: Subscription
        namespace: openshift-operators
        name: 'amq-streams'
        api_version: 'operators.coreos.com/v1alpha1'
      register: operatordetails
      until: (operatordetails['resources'][0]['status']['state'] is defined) and (operatordetails['resources'][0]['status']['state'] == 'AtLatestKnown')
      retries: 10
      delay: 30

    - name: Debug the operator details
      ansible.builtin.debug:
        var: operatordetails

    - name: Install Kafka
      redhat.openshift.k8s:
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        host: "{{ ocp_host }}"
        validate_certs: false
        api_version: kafka.strimzi.io/v1beta2
        kind: Kafka
        resource_definition:
          metadata:
            name: acs-demo-kafka
            namespace: "{{ kafka_namespace }}"
          spec:
            kafka:
              config:
                offsets.topic.replication.factor: 3
                transaction.state.log.replication.factor: 3
                transaction.state.log.min.isr: 2
                default.replication.factor: 3
                min.insync.replicas: 2
                inter.broker.protocol.version: '3.7'
              storage:
                type: ephemeral
              listeners:
                - name: plain
                  port: 9092
                  type: internal
                  tls: false
                - name: tls
                  port: 9093
                  type: internal
                  tls: true
              replicas: 3
            entityOperator:
              topicOperator: {}
              userOperator: {}
            zookeeper:
              storage:
                type: ephemeral
              replicas: 3
        state: present
      retries: 10
      delay: 30

    - name: Get Kafka URL (when Kafka Instance is available)
      kubernetes.core.k8s_info:
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        host: "{{ ocp_host }}"
        validate_certs: false
        api_version: v1
        kind: Service
        namespace: "{{ kafka_namespace }}"
        name: acs-demo-kafka-kafka-bootstrap
      register: kafka_bootstrap
      until: "kafka_bootstrap.resources | length > 0"
      retries: 10
      delay: 30

    - name: Debug service
      ansible.builtin.debug:
        var: kafka_bootstrap.resources

    - name: Debug Kafka endpoint
      ansible.builtin.debug:
        var: kafka_bootstrap.resources[0].spec.clusterIP

    - name: Debug Kafka endpoint pt2
      ansible.builtin.debug:
        var: kafka_bootstrap.resources[0].spec.ports[1].port

    - name: Set Kafka hostname and port variable
      ansible.builtin.set_fact:
        kafkahostname: kafka_bootstrap.resources[0].spec.hostname
        kafkaport: kafka_boostrap.resources[0].spec.ports[1].port # This is the unsecured http port

    - name: Create Kafka Topics
      redhat.openshift.k8s:
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        host: "{{ ocp_host }}"
        validate_certs: false
        api_version: kafka.strimzi.io/v1beta2
        kind: KafkaTopic
        resource_definition:
          metadata:
            name: "{{ item }}"
            namespace: "{{ kafka_namespace }}"
        state: present
      loop: "{{ kafka_topic_list }}"
      retries: 10
      delay: 30

  always:
    - name: If login succeeds, revoke the API key
      when: openshift_auth_results.openshift_auth.api_key is defined
      redhat.openshift.openshift_auth:
        state: absent
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        host: "{{ ocp_host }}"
        validate_certs: false
      ignore_errors: true
