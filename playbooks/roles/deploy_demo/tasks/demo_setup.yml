---
- name: Create Platform Organization
  ansible.controller.organization:
    name: "{{ org_platform.name }}"
    description: "{{ org_platform.description }}"
    state: present
    tower_host: "{{ aap_host }}"
    tower_username: "{{ aap_username }}"
    tower_password: "{{ aap_password }}"

- name: Create App Organization
  ansible.controller.organization:
    name: "{{ org_app.name }}"
    description: "{{ org_app.description }}"
    state: present
    tower_host: "{{ aap_host }}"
    tower_username: "{{ aap_username }}"
    tower_password: "{{ aap_password }}"

- name: Add a sample inventory
  ansible.controller.inventory:
    name: "{{ org_platform.name }}-assets"
    description: "{{ org_platform.description }} Asset List"
    organization: "{{ org_platform.name }}"
    state: present
    tower_host: "{{ aap_host }}"
    tower_username: "{{ aap_username }}"
    tower_password: "{{ aap_password }}"
- name: Add host to inventory
  ansible.controller.host:
    name: "{{ managed_host }}"
    description: "Local Host for Inventory"
    inventory: "{{ org_platform.name }}-assets"
    state: present
    enabled: true
    variables:
      ansible_connection: local
    tower_host: "{{ aap_host }}"
    tower_username: "{{ aap_username }}"
    tower_password: "{{ aap_password }}"
- name: Add a sample credential
  ansible.controller.credential:
    name: "{{ org_platform.name }}-network-access"
    description: "{{ org_platform.description }} Network Access Credential"
    organization: "{{ org_platform.name }}"
    credential_type: Machine
    inputs:
      username: "{{ network_cred_username }}"
      password: "{{ network_cred_password }}"
    state: present
    tower_host: "{{ aap_host }}"
    tower_username: "{{ aap_username }}"
    tower_password: "{{ aap_password }}"
- name: Add platform project
  ansible.controller.project:
    name: "{{ org_platform.name }}-demo"
    description: "{{ org_platform.description }} Project"
    organization: "{{ org_platform.name }}"
    scm_branch: main
    scm_clean: true
    scm_type: git
    scm_update_on_launch: true
    scm_url: "{{ org_platform.repo }}"
    update_project: true
    wait: true
    state: present
    tower_host: "{{ aap_host }}"
    tower_username: "{{ aap_username }}"
    tower_password: "{{ aap_password }}"

- name: Add app team project
  ansible.controller.project:
    name: "{{ org_app.name }}-demo"
    description: "{{ org_app.description }} Project"
    organization: "{{ org_app.name }}"
    scm_branch: main
    scm_clean: true
    scm_type: git
    scm_update_on_launch: true
    scm_url: "{{ org_app.repo }}"
    update_project: true
    wait: true
    state: present
    tower_host: "{{ aap_host }}"
    tower_username: "{{ aap_username }}"
    tower_password: "{{ aap_password }}"


- name: Create a set of job templates for the platform team
  ansible.controller.job_template:
    name: "{{ item.name }}"
    job_type: "run"
    organization: "{{ org_platform.name }}"
    inventory: "{{ org_platform.name }}-assets"
    project: "{{ org_platform.name }}-demo"
    playbook: "{{ item.playbook }}"
    credentials:
      - "{{ org_platform.name }}-network-access"
    state: present
    tower_host: "{{ aap_host }}"
    tower_username: "{{ aap_username }}"
    tower_password: "{{ aap_password }}"
  loop:
    - { name: "1-create-cr", playbook: "playbooks/snow_create_cr.yml" }
    - { name: "I1-incident", playbook: "playbooks/snow_create_incident.yml" }
    - { name: "3-provision", playbook: "playbooks/provision_infrastructure.yml" }

- name: Create a set of job templates for the app team
  ansible.controller.job_template:
    name: "{{ item.name }}"
    job_type: "run"
    organization: "{{ org_app.name }}"
    inventory: "{{ org_platform.name }}-assets"
    project: "{{ org_app.name }}-demo"
    playbook: "{{ item.playbook }}"
    credentials:
      - "{{ org_platform.name }}-network-access"
    state: present
    tower_host: "{{ aap_host }}"
    tower_username: "{{ aap_username }}"
    tower_password: "{{ aap_password }}"
  loop:
    - { name: "2-prerollout", playbook: "playbooks/prerollout_check.yml" }
    - { name: "4-postprovision", playbook: "playbooks/postprovision_configuration.yml" }
    - { name: "5-tvt", playbook: "playbooks/postrollout_tvt.yml" }

- name: Create a set of job templates for CR status update
  ansible.controller.job_template:
    name: "{{ item.name }}"
    job_type: "run"
    organization: "{{ org_platform.name }}"
    inventory: "{{ org_platform.name }}-assets"
    project: "{{ org_platform.name }}-demo"
    playbook: "playbooks/snow_set_cr_status.yml"
    extra_vars:
      new_state: "{{ item.new_state }}"
      assignment_group: "Software"
    credentials:
      - "{{ org_platform.name }}-network-access"
    state: present
    tower_host: "{{ aap_host }}"
    tower_username: "{{ aap_username }}"
    tower_password: "{{ aap_password }}"
  loop:
    - { name: "S.0-update-cr-status-scheduled", new_state: "scheduled" }
    - { name: "S.1-update-cr-status-started", new_state: "implement" }
    - { name: "S.2-update-cr-status-failed", new_state: "canceled" }
    - { name: "S.3-update-cr-status-review", new_state: "review" }

- name: Create a job template for CR closure
  ansible.controller.job_template:
    name: "S.4-update-cr-status-complete"
    job_type: "run"
    organization: "{{ org_platform.name }}"
    inventory: "{{ org_platform.name }}-assets"
    project: "{{ org_platform.name }}-demo"
    playbook: "playbooks/snow_set_cr_closed.yml"
    extra_vars:
      new_state: "closed"
      assignment_group: "Software"
      close_code: successful
      close_notes: "Deployment performed successfully"
    credentials:
      - "{{ org_platform.name }}-network-access"
    state: present
    tower_host: "{{ aap_host }}"
    tower_username: "{{ aap_username }}"
    tower_password: "{{ aap_password }}"

- name: Create a job template to launch a workflow template (ugh)
  ansible.controller.job_template:
    name: "rollout-app"
    job_type: "run"
    organization: "{{ org_platform.name }}"
    inventory: "{{ org_platform.name }}-assets"
    project: "{{ org_platform.name }}-demo"
    playbook: "playbooks/launch_workflow.yml"
    extra_vars:
      aap_hostname: "{{ aap_host }}"
      aap_username: "{{ aap_username }}"
      aap_password: "{{ aap_password }}"
    credentials:
      - "{{ org_platform.name }}-network-access"
    state: present
    tower_host: "{{ aap_host }}"
    tower_username: "{{ aap_username }}"
    tower_password: "{{ aap_password }}"

- name: Create a workflow template
  ansible.controller.workflow_job_template:
    name: "rollout-app-impl"
    description: "Sample App Deployment Workflow with ServiceNow integration and Multiple Teams"
    organization: "{{ org_platform.name }}"
    inventory: "{{ org_platform.name }}-assets"
    webhook_service: "github"
    extra_vars:
      snow_hostname: "{{ snow_hostname }}"
      snow_username: "{{ snow_username }}"
      snow_password: "{{ snow_password }}"
      snow_cr_user: "{{ snow_username }}"
      snow_cr_title: "Deploy VM Application"
      snow_cr_description: "Provision infrastructure and deploy the VM-based application with TVT"
      snow_incident_title: "Failed Application Deployment"
      snow_incident_description: "Application Deployment failed due to error 12345"
    workflow_nodes:
      - identifier: 1-create
        unified_job_template:
          name: "1-create-cr"
          type: job_template
          organization:
            name: "{{ org_platform.name }}"
        related:
          success_nodes: []
          failure_nodes: []
          always_nodes:
            - identifier: "2-prerollout"
          credentials: []

      - identifier: 2-prerollout
        unified_job_template:
          name: "2-prerollout"
          type: job_template
          organization:
            name: "{{ org_app.name }}"
        related:
          success_nodes:
            - identifier: "3-provision"
            - identifier: "S0-scheduled"
          failure_nodes:
            - identifier: "S2-failed"
          always_nodes: []
          credentials: []

      - identifier: S0-scheduled
        unified_job_template:
          name: "S.0-update-cr-status-scheduled"
          type: job_template
          organization:
            name: "{{ org_platform.name }}"
        related:
          success_nodes: []
          failure_nodes: []
          always_nodes:
            - identifier: "S1-started"
          credentials: []

      - identifier: S1-started
        unified_job_template:
          name: "S.1-update-cr-status-started"
          type: job_template
          organization:
            name: "{{ org_platform.name }}"
        related:
          success_nodes: []
          failure_nodes: []
          always_nodes: []
          credentials: []

      - identifier: S2-failed
        unified_job_template:
          name: "S.2-update-cr-status-failed"
          type: job_template
          organization:
            name: "{{ org_platform.name }}"
        related:
          success_nodes: []
          failure_nodes: []
          always_nodes: []
          credentials: []

      - identifier: 3-provision
        unified_job_template:
          name: "3-provision"
          type: job_template
          organization:
            name: "{{ org_platform.name }}"
        related:
          success_nodes: []
          failure_nodes: []
          always_nodes:
            - identifier: "4-postprovision"
          credentials: []

      - identifier: 4-postprovision
        unified_job_template:
          name: "4-postprovision"
          type: job_template
          organization:
            name: "{{ org_app.name }}"
        related:
          success_nodes: []
          failure_nodes: []
          always_nodes:
            - identifier: "5-tvt"
          credentials: []

      - identifier: 5-tvt
        unified_job_template:
          name: "5-tvt"
          type: job_template
          organization:
            name: "{{ org_app.name }}"
        related:
          success_nodes:
            - identifier: "S3-review"
          failure_nodes:
            - identifier: "I1-incident"
          always_nodes: []
          credentials: []

      - identifier: S3-review
        unified_job_template:
          name: "S.3-update-cr-status-review"
          type: job_template
          organization:
            name: "{{ org_platform.name }}"
        related:
          success_nodes: []
          failure_nodes: []
          always_nodes:
            - identifier: "S4-complete"
          credentials: []

      - identifier: S4-complete
        unified_job_template:
          name: "S.4-update-cr-status-complete"
          type: job_template
          organization:
            name: "{{ org_platform.name }}"
        related:
          success_nodes: []
          failure_nodes: []
          always_nodes: []
          credentials: []

      - identifier: I1-incident
        unified_job_template:
          name: "I1-incident"
          type: job_template
          organization:
            name: "{{ org_platform.name }}"
        related:
          success_nodes: []
          failure_nodes: []
          always_nodes:
            - identifier: "S5-failed"
          credentials: []

      - identifier: S5-failed
        unified_job_template:
          name: "S.2-update-cr-status-failed"
          type: job_template
          organization:
            name: "{{ org_platform.name }}"
        related:
          success_nodes: []
          failure_nodes: []
          always_nodes: []
          credentials: []
    state: present
    tower_host: "{{ aap_host }}"
    tower_username: "{{ aap_username }}"
    tower_password: "{{ aap_password }}"


# RBACS
- name: Add a dev team
  ansible.controller.team:
    name: "dev-team"
    description: "Application Development Team"
    organization: "{{ org_app.name }}"
    state: present
    tower_host: "{{ aap_host }}"
    tower_username: "{{ aap_username }}"
    tower_password: "{{ aap_password }}"

- name: Give the dev team rights on the app organisation
  ansible.controller.role:
    team: "dev-team"
    role: "{{ item }}"
    organization: "{{ org_app.name }}"
    state: present
    tower_host: "{{ aap_host }}"
    tower_username: "{{ aap_username }}"
    tower_password: "{{ aap_password }}"
  with_items:
    - read
    - execute
    - job_template_admin
    - workflow_admin
    - project_admin
    - auditor

- name: Add a dev user
  ansible.controller.user:
    first_name: "Debra"
    last_name: "Developer"
    username: "debra"
    password: "Password1"
    organization: "{{ org_app.name }}"
    state: present
    tower_host: "{{ aap_host }}"
    tower_username: "{{ aap_username }}"
    tower_password: "{{ aap_password }}"

- name: Give the dev user membership to the dev team
  ansible.controller.role:
    target_teams: ["dev-team"]
    user: "debra"
    role: "{{ item }}"
    lookup_organization: "{{ org_app.name }}"
    state: present
    tower_host: "{{ aap_host }}"
    tower_username: "{{ aap_username }}"
    tower_password: "{{ aap_password }}"
  with_items:
    - member
    - read


- name: Add a platform team
  ansible.controller.team:
    name: "platform-team"
    description: "Platform Ops Team"
    organization: "{{ org_platform.name }}"
    state: present
    tower_host: "{{ aap_host }}"
    tower_username: "{{ aap_username }}"
    tower_password: "{{ aap_password }}"

- name: Give the platform team rights on the platform organisation
  ansible.controller.role:
    team: "platform-team"
    role: "{{ item }}"
    organization: "{{ org_platform.name }}"
    state: present
    tower_host: "{{ aap_host }}"
    tower_username: "{{ aap_username }}"
    tower_password: "{{ aap_password }}"
  with_items:
    - project_admin
    - notification_admin
    - inventory_admin
    - credential_admin
    - execution_environment_admin
    - job_template_admin
    - workflow_admin
    - auditor

- name: Add a platform user
  ansible.controller.user:
    first_name: "Paul"
    last_name: "Platform"
    username: "paul"
    password: "Password1"
    organization: "{{ org_platform.name }}"
    state: present
    tower_host: "{{ aap_host }}"
    tower_username: "{{ aap_username }}"
    tower_password: "{{ aap_password }}"

- name: Give the platform user membership to the platform team
  ansible.controller.role:
    target_teams: ["platform-team"]
    user: "paul"
    role: "{{ item }}"
    lookup_organization: "{{ org_platform.name }}"
    state: present
    tower_host: "{{ aap_host }}"
    tower_username: "{{ aap_username }}"
    tower_password: "{{ aap_password }}"
  with_items:
    - member
    - read


# EDA


- name: Create an application for EDA to connect to
  ansible.controller.application:
    name: "eda"
    description: "Event-Driven Ansible Connector"
    organization: "{{ org_platform.name }}"
    state: present
    authorization_grant_type: authorization-code
    redirect_uris:
      - http://tower.com/api/v2/
    client_type: confidential
    tower_host: "{{ aap_host }}"
    tower_username: "{{ aap_username }}"
    tower_password: "{{ aap_password }}"

- name: Create a user access token for EDA
  ansible.controller.token:
    description: "Ansible EDA Access Token"
    scope: "write"
    application: "eda"
    state: present
    tower_host: "{{ aap_host }}"
    tower_username: "{{ aap_username }}"
    tower_password: "{{ aap_password }}"
  register: controller_oauthtoken

- name: Store that token for later
  ansible.builtin.set_fact:
    awx_token: "{{ controller_oauthtoken.ansible_facts.controller_token.token }}"

- name: Write out the new token value
  ansible.builtin.debug:
    msg: "Access token for EDA access to AAP: {{ awx_token }}"
