---
- name: Perform a set of OpenShift API calls
  block:

    - name: Log in to the OpenShift API
      redhat.openshift.openshift_auth:
        host: "{{ ocp_host }}"
        username: "{{ ocp_username }}"
        password: "{{ ocp_password }}"
        validate_certs: false
        state: present
      register: openshift_auth_results

    # - name: Show me the api key
    #   ansible.builtin.debug:
    #     var: openshift_auth_results

    - name: Create aap namespace in OpenShift
      redhat.openshift.k8s:
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        host: "{{ ocp_host }}"
        validate_certs: false
        name: aap
        api_version: v1
        kind: Namespace
        state: present

    - name: Create operator group for AAP Operator
      redhat.openshift.k8s:
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        host: "{{ ocp_host }}"
        validate_certs: false
        api_version: operators.coreos.com/v1
        kind: OperatorGroup
        resource_definition:
          metadata:
            name: ansible-automation-platform-operator
            namespace: aap
          spec:
            targetNamespaces:
              - aap
        state: present

    - name: Install AAP Operator
      redhat.openshift.k8s:
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        host: "{{ ocp_host }}"
        validate_certs: false
        api_version: operators.coreos.com/v1alpha1
        kind: Subscription
        resource_definition:
          metadata:
            name: ansible-automation-platform
            namespace: aap
          spec:
            channel: 'stable-2.4'
            installPlanApproval: Automatic
            name: ansible-automation-platform-operator
            source: redhat-operators
            sourceNamespace: openshift-marketplace
        state: present

    - name: Wait for the operator to be available
      kubernetes.core.k8s_info:
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        host: "{{ ocp_host }}"
        validate_certs: false
        kind: Subscription
        namespace: aap
        name: 'ansible-automation-platform'
        api_version: 'operators.coreos.com/v1alpha1'
      register: operatordetails
      until: "operatordetails.resources | length > 0"
      retries: 10
      delay: 30

    # - name: Debug the operator details
    #   ansible.builtin.debug:
    #     var: operatordetails

    - name: Install AAP Controller
      redhat.openshift.k8s:
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        host: "{{ ocp_host }}"
        validate_certs: false
        api_version: automationcontroller.ansible.com/v1beta1
        kind: AutomationController
        resource_definition:
          metadata:
            name: demo-aap
            namespace: aap
          spec:
            replicas: 1
        state: present

    - name: Get AAP URL (when AAP Controller is available)
      kubernetes.core.k8s_info:
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        host: "{{ ocp_host }}"
        validate_certs: false
        api_version: route.openshift.io/v1
        kind: Route
        namespace: aap
        name: demo-aap
      register: aap_route
      until: "aap_route.resources | length > 0"
      retries: 10
      delay: 30

    # - name: Debug route
    #   ansible.builtin.debug:
    #     var: aap_route.resources

    - name: Get AAP admin password
      kubernetes.core.k8s_info:
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        host: "{{ ocp_host }}"
        validate_certs: false
        api_version: v1
        kind: Secret
        namespace: aap
        name: demo-aap-admin-password
      register: aap_admin_pwd


    - name: Install EDA Controller
      redhat.openshift.k8s:
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        host: "{{ ocp_host }}"
        validate_certs: false
        api_version: eda.ansible.com/v1alpha1
        kind: EDA
        resource_definition:
          metadata:
            name: demo-eda
            namespace: aap
          spec:
            replicas: 1
            automation_server_url: "{{ aap_route.resources[0].spec.port.targetPort }}://{{ aap_route.resources[0].spec.host }}"
        state: present

    - name: Get EDA admin password (when EDA is available)
      kubernetes.core.k8s_info:
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        host: "{{ ocp_host }}"
        validate_certs: false
        api_version: v1
        kind: Secret
        namespace: aap
        name: demo-eda-admin-password
      register: eda_admin_pwd
      until: "eda_admin_pwd.resources | length > 0"
      retries: 10
      delay: 30

    - name: Get EDA URL (when EDA is available)
      kubernetes.core.k8s_info:
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        host: "{{ ocp_host }}"
        validate_certs: false
        api_version: route.openshift.io/v1
        kind: Route
        namespace: aap
        name: demo-eda
      register: eda_route
      until: "eda_route.resources | length > 0"
      retries: 10
      delay: 30

    # - name: Debug the AAP password
    #  ansible.builtin.debug:
    #    msg: "{{ aap_admin_pwd.resources[0].data.password | b64decode }}"

    # - name: Debug the EDA password
    #  ansible.builtin.debug:
    #    msg: "{{ eda_admin_pwd.resources[0].data.password | b64decode }}"

    # Set facts for the deploy_demo role
    - name: Set facts for demo deployment
      ansible.builtin.set_fact:
        aap_host: "{{ aap_route.resources[0].spec.host }}"
        aap_username: "admin"
        aap_password: "{{ aap_admin_pwd.resources[0].data.password | b64decode }}"
        eda_host: "{{ eda_route.resources[0].spec.host }}"
        eda_username: "admin"
        eda_password: "{{ eda_admin_pwd.resources[0].data.password | b64decode }}"

  always:
    - name: If login succeeds, revoke the API key
      when: openshift_auth_results.openshift_auth.api_key is defined
      redhat.openshift.openshift_auth:
        state: absent
        api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
        host: "{{ ocp_host }}"
        validate_certs: false
