---
- name: Add the new VM to the CMDB inventory in ServiceNow
  hosts: all
  gather_facts: false
  # The following vars should be set on the job
  # snow_instance - the URL to a ServiceNow instance (eg. https://dev123456.service-now.com)
  # snow_username - the ServiceNow API access username
  # snow_password - the ServiceNow API access password
  # ocp_host - the hostname of the openShift API server
  # ocp_token - API Access Token
  tasks:
    - name: Set the VM hostname and namespace vars
      ansible.builtin.set_fact:
        vm_hostname: "{{ ansible_eda.event.body.kubernetes.labels.vm_kubevirt_io_name }}"
        vm_namespace: "{{ ansible_eda.event.body.kubernetes.namespace_name }}"

    - name: Where am I connecting?
      ansible.builtin.debug:
        var: ocp_host

    - name: With what token?
      ansible.builtin.debug:
        var: ocp_token

#    - name: Get VM details from OpenShift Virtualization
#      redhat.openshift_virtualization.kubevirt_vm_info:
#        host: "{{ ocp_host }}"
#        api_key: "{{ ocp_token }}"
#        validate_certs: false
#        name: "{{ vm_hostname }}"
#        namespace: "{{ vm_namespace }}"
#      register: vm_details

    - name: Get VM details from k8s Interface
      kubernetes.core.k8s_info:
        api_version: v1
        host: "{{ ocp_host }}"
        api_key: "{{ ocp_token }}"
        validate_certs: false
        kind: VirtualMachineInstance
        name: "{{ vm_hostname }}"
        namespace: "{{ vm_namespace }}"
      register: vm_details

    - name: Debug the VM details
      ansible.builtin.debug:
        var: vm_details


    - name: Create a configuration item
      servicenow.itsm.configuration_item:
        instance:
          host: "{{ snow_instance }}"
          username: "{{ snow_username }}"
          password: "{{ snow_password }}"
        name: "{{ vm_hostname }}"
        sys_class_name: cmdb_ci_server
        environment: production
        category: Virtual Machine
        install_status: installed
        ip_address: "{{ vm_details.resources[0].status.interfaces[0].ipAddress }}"
        mac_address: "{{ vm_details.resources[0].spec.template.spec.domain.devices.interfaces[0].macAddress }}"
        operational_status: operational
        serial_number: "{{ vm_details.resources[0].metadata.uid }}"
        other:
          virtual: true
          ram: "{{ (vm_details.resources[0].spec.template.spec.domain.memory.guest | replace('Gi', '') | int) * 1024 }}"
          cpu_name: "{{ vm_details.resources[0].spec.domain.cpu.model }}"
          cpu_count: "{{ vm_details.resources[0].spec.domain.cpu.sockets }}"
          cpu_core_count: "{{ vm_details.resources[0].spec.domain.cpu.cores }}"
          cpu_type: "{{ vm_details.resources[0].spec.architecture }}"
          os_version:
          os: "{{ vm_details.resources[0].metadata.annotations.vm.kubevirt.io/os }}"
      register: new_ci

    - name: Debug the new CI details
      ansible.builtin.debug:
        var: new_ci
